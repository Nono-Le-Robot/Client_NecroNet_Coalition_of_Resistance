/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { SkeletonUtils } from "three-stdlib";

const SPEED_RUN_MOVEMENT = 0.05;
const SPEED_WALK_MOVEMENT = 0.025;


export function Adventurer({
    hairColor = "green",
    topColor = "blue",
    bottomColor = "pink",
    shoesColor = "black",
    backpackMainColor = "blue",
    backpackSecondaryColor = "brown",
    backpackTopColor = "blue",
    actionAnimation,
    ...props
}) {
    const position = useMemo(() => props.position, [])
    const group = useRef();
    const { scene, materials, animations } = useGLTF("./models/Adventurer.glb");
    const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
    const { nodes } = useGraph(clone)
    const { actions } = useAnimations(animations, group);
    const [animation, setAnimation] = useState('CharacterArmature|Idle');
    const [animationToPlay, setAnimationToPlay] = useState(actionAnimation)
    useEffect(() => {
        actions[animation].reset().fadeIn(0.32).play()
        return () => actions[animation]?.fadeOut(0.32);
    }, [animation])

    // useEffect(() => {
    //     setTimeout(() => {
    //         setAnimationToPlay("run")
    //     }, 5000)
    // }, [])

    useFrame(() => {
        console.log(actionAnimation)
        if (group.current.position.distanceTo(props.position) > 0.1) {
            let direction;

            if (actionAnimation === "walk") {
                setAnimation("CharacterArmature|Walk")
                direction = group.current.position.clone().sub(props.position).normalize().multiplyScalar(SPEED_WALK_MOVEMENT)
                group.current.position.sub(direction)
                group.current.lookAt(props.position)
            }
            if (actionAnimation === "run") {
                setAnimation("CharacterArmature|Run")
                direction = group.current.position.clone().sub(props.position).normalize().multiplyScalar(SPEED_RUN_MOVEMENT)
                group.current.position.sub(direction)
                group.current.lookAt(props.position)
            }

        }
        else {
            setAnimation("CharacterArmature|Idle")
        }
    })

    return (
        <group ref={group} {...props} position={position} dispose={null}>
            <group name="Root_Scene">
                <group name="RootNode">
                    <group
                        name="CharacterArmature"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <primitive object={nodes.Root} />
                    </group>
                    <group
                        name="Adventurer_Feet"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <skinnedMesh
                            name="Adventurer_Feet_1"
                            geometry={nodes.Adventurer_Feet_1.geometry}
                            material={materials.Black}
                            skeleton={nodes.Adventurer_Feet_1.skeleton}
                        />
                        <skinnedMesh
                            name="Adventurer_Feet_2"
                            geometry={nodes.Adventurer_Feet_2.geometry}
                            material={materials.Grey}
                            skeleton={nodes.Adventurer_Feet_2.skeleton}
                        >
                            <meshStandardMaterial color={shoesColor} />
                        </skinnedMesh>
                    </group>
                    <group
                        name="Adventurer_Legs"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <skinnedMesh
                            name="Adventurer_Legs_1"
                            geometry={nodes.Adventurer_Legs_1.geometry}
                            material={materials.Brown2}
                            skeleton={nodes.Adventurer_Legs_1.skeleton}
                        />
                        <skinnedMesh
                            name="Adventurer_Legs_2"
                            geometry={nodes.Adventurer_Legs_2.geometry}
                            material={materials.Brown}
                            skeleton={nodes.Adventurer_Legs_2.skeleton}
                        >
                            <meshStandardMaterial color={bottomColor} />
                        </skinnedMesh>
                    </group>
                    <group
                        name="Adventurer_Body"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <skinnedMesh
                            name="Adventurer_Body_1"
                            geometry={nodes.Adventurer_Body_1.geometry}
                            material={materials.Green}
                            skeleton={nodes.Adventurer_Body_1.skeleton}
                        >
                            <meshStandardMaterial color={topColor} />
                        </skinnedMesh>
                        <skinnedMesh
                            name="Adventurer_Body_2"
                            geometry={nodes.Adventurer_Body_2.geometry}
                            material={materials.LightGreen}
                            skeleton={nodes.Adventurer_Body_2.skeleton}
                        >
                            <meshStandardMaterial color={topColor} />
                        </skinnedMesh>
                        <skinnedMesh
                            name="Adventurer_Body_3"
                            geometry={nodes.Adventurer_Body_3.geometry}
                            material={materials.Skin}
                            skeleton={nodes.Adventurer_Body_3.skeleton}
                        />
                    </group>
                    <group
                        name="Adventurer_Head"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <skinnedMesh
                            name="Adventurer_Head_1"
                            geometry={nodes.Adventurer_Head_1.geometry}
                            material={materials.Skin}
                            skeleton={nodes.Adventurer_Head_1.skeleton}
                        />
                        <skinnedMesh
                            name="Adventurer_Head_2"
                            geometry={nodes.Adventurer_Head_2.geometry}
                            material={materials.Eyebrows}
                            skeleton={nodes.Adventurer_Head_2.skeleton}
                        />
                        <skinnedMesh
                            name="Adventurer_Head_3"
                            geometry={nodes.Adventurer_Head_3.geometry}
                            material={materials.Eye}
                            skeleton={nodes.Adventurer_Head_3.skeleton}
                        />
                        <skinnedMesh
                            name="Adventurer_Head_4"
                            geometry={nodes.Adventurer_Head_4.geometry}
                            material={materials.Hair}
                            skeleton={nodes.Adventurer_Head_4.skeleton}
                        >
                            <meshStandardMaterial color={hairColor} />
                        </skinnedMesh>
                    </group>
                    <group
                        name="Backpack"
                        position={[0, 1.373, -0.117]}
                        rotation={[-Math.PI / 2, 0, Math.PI]}
                        scale={26.077}
                    >
                        <skinnedMesh
                            name="Backpack_1"
                            geometry={nodes.Backpack_1.geometry}
                            material={materials.Brown}
                            skeleton={nodes.Backpack_1.skeleton}
                        >
                            <meshStandardMaterial color={backpackTopColor} />
                        </skinnedMesh>
                        <skinnedMesh
                            name="Backpack_2"
                            geometry={nodes.Backpack_2.geometry}
                            material={materials.Green}
                            skeleton={nodes.Backpack_2.skeleton}
                        >
                            <meshStandardMaterial color={backpackSecondaryColor} />
                        </skinnedMesh>
                        <skinnedMesh
                            name="Backpack_3"
                            geometry={nodes.Backpack_3.geometry}
                            material={materials.LightGreen}
                            skeleton={nodes.Backpack_3.skeleton}
                        >
                            <meshStandardMaterial color={backpackMainColor} />
                        </skinnedMesh>
                        <skinnedMesh
                            name="Backpack_4"
                            geometry={nodes.Backpack_4.geometry}
                            material={materials.Gold}
                            skeleton={nodes.Backpack_4.skeleton}
                        />
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("./models/Adventurer.glb");
